% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_custom_transformation.R
\name{step_custom_transformation}
\alias{step_custom_transformation}
\alias{tidy.step_custom_transformation}
\title{Custom Transformation}
\usage{
step_custom_transformation(recipe, ..., role = "predictor",
  trained = FALSE, prep_fct = NULL, prep_fct_args = NULL,
  prep_output = NULL, bake_fct = NULL, bake_fct_args = NULL,
  bake_how = "bind_cols", selected_vars = NULL, skip = FALSE)

tidy.step_custom_transformation(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of
operations for this recipe.}

\item{...}{One or more selector functions to choose which variables are
affected by the step.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the function assumes that the new columns
will be used as predictors in a model.}

\item{trained}{A logical to indicate if the quantities for preprocessing have
been estimated.}

\item{prep_fct}{A function. This is a helper function for the `prep` method.
It will be invoked, when the recipe is 'prepped' (/trained) with
`prep.recipe()`. The function MUST satisfy the following conditions: (1)
the function must take an argument `x`: input data with only the selected
variables, (2) the function MUST return the relevant statistics that should
be learned on the train set and used for preparation of new new data sets.
This output can be of any appropriate type and shape. Leave `prep_fct` as
NULL, if the preparation of new data sets does not depend on
statistics/computations learned on the train set.}

\item{prep_fct_args}{A list with (any) additional arguments for the prep
helper function call EXCEPT for the `x` argument. Leave as NULL, if no
`prep_fct` is given.}

\item{prep_output}{Output from prep helper (`prep_fct`) function call. The
results are not computed until `prep.recipe()` is called.}

\item{bake_fct}{A function. This is a helper function for the 'bake' method.
It will be invoked, when the recipe is 'baked' (/transforms a new data set)
with `bake.recipe()`. The function MUST satisfy the following conditions:
(1) the function must take an argument `x`: data set with the selected
variables from the new data set, (2) if the preparation of new data sets
depends on statistics learned on the train set, the function must take the
argument `prep_output`: the output from the prep helper fct (`prep_fct`),
(3) the output from from the function should be the transformed variables.
The output must be of a type and shape, that allows it to be binded column
wise to the new data set after converting it to a `tibble`.}

\item{bake_fct_args}{A list with (any) arguments for the bake helper function
call EXCEPT for the `x` and `prep_output` arguments.}

\item{bake_how}{A character. How should the transformed variables be appended
to the new data set? Choose from options (1) `bind_cols`: simply bind the
transformed variables to the new data set or (2) `replace`: replace the
selected variables (`selected vars`) from the new data set with the
transformed variables.}

\item{selected_vars}{A character string that contains the names of the
selected variables. These values are not determined until prep.recipe() is
called.}

\item{skip}{A logical. Should the step be skipped when the recipe is baked by
\link[recipes]{bake.recipe} While all operations are baked when `prep.recipe()` is
run, some operations may not be able to be conducted on new data (e.g.
processing the outcome variable(s)). Care should be taken when using `skip
= TRUE` as it may affect the computations for subsequent operations.}

\item{x}{A `step_custom_transformation` object.}
}
\value{
An updated version of `recipe` with the new step added to the
  sequence of existing steps (if any). For the `tidy` method, a `tibble` with
  columns `terms` (the selectors or variables selected).
}
\description{
`step_custom_transformation` creates a *specification* of a recipe step that
will make a user-defined transformation of the input data from custom `prep`
and `bake` helper functions.
}
\examples{
library(magrittr)
library(tidyselect)

# generate data.
df <- tibble::tibble(a = rnorm(100),
                     b = rnorm(100),
                     c = rnorm(100))

# custom step: prep and bake functions ------------------------------------


# define prep helper function, that computes means and standard deviations
# for all variables in a data set.
compute_means_sd <- function(x, na.rm = FALSE, trim = 0) {

  purrr::map(x, ~ list(mean = mean(.x, na.rm = na.rm, trim = trim),
                       sd = sd(.x)))

}

# define prep function, that subtracts k means from the variable, and
# divides by the standard deviation.
center_scale <- function(x, prep_output, k) {

  newdata <- dplyr::select(x, names(prep_output))

  purrr::map2(.x = newdata,
              .y = prep_output,
              ~ (.x - k * .y$mean) / .y$sd)
}

# create recipe.
rec <- recipes::recipe(df) \%>\%
  step_custom_transformation(b, c,
                             prep_fct = compute_means_sd,
                             prep_fct_args = list(na.rm = TRUE, trim = 0.05),
                             bake_fct = center_scale,
                             bake_fct_args = list(k = 2),
                             bake_how = "bind_cols")

# prep recipe.
rec_prep <- recipes::prep(rec)

# bake recipe.
rec_baked <- recipes::bake(rec_prep, df)
rec_baked

# # inspect output.
# rec
# rec_baked
# broom::tidy(rec)
# broom::tidy(rec, 1)
# broom::tidy(rec_prep)
# broom::tidy(rec_prep, 1)

# custom step: bake only --------------------------------------------------


# create custom bake function.
simple_calculation <- function(x) {

  x \%>\%
    dplyr::transmute(d = a + b - c)

}

# create recipe.
rec <- recipes::recipe(df) \%>\%
  step_custom_transformation(everything(),
                             bake_fct = simple_calculation,
                             bake_how = "bind_cols")

# prep recipe.
rec_prep <- recipes::prep(rec)

# bake recipe.
rec_baked <- recipes::bake(rec_prep, df)

# # inspect output.
# rec
# rec_baked
# broom::tidy(rec)
# broom::tidy(rec, 1)
# broom::tidy(rec_prep)
# broom::tidy(rec_prep, 1)
}
\concept{preprocessing}
\keyword{datagen}
